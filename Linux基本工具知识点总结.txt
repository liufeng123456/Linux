## Linux项目自动化构建工具 make/makefile
- makefile：普通文本文件，但是不普通的是makefile中记录的是项目的构建规则
- make：一个程序---makefile解释器；解释makefile中项目构建规则；完成项目的构建
    - 在当前目录下敲击make命令，make程序到当前目录找makefile文件，逐行解释:makefile对大小写不敏感
- makefile基本编写规则：
    - 目标对象：[依赖文件]
       tab 要执行的命令

       ![93f53e3613b2aadc0f68ccf7b741ab21.png](en-resource://database/452:1)
       -  make的解释规则
            - make打开makefile文件之后，找寻第一个目标对象名称
            若没有找到：认为没有要生成的对象，报错退出
            若找到了：判断目标对象文件是否存在
              - 目标对象文件若存在：判断是否有依赖对象名称
                - 若没有依赖对象名称：认为目标对象已经生成，不需要重新执行命令生成
               ![70122d2753ef015893b9f804e544c34c.png](en-resource://database/474:0)
               ![8abbd775db8f485170d77742c1fd50ce.png](en-resource://database/476:0)
               
               
                - 若有依赖对象名称：判断依赖对象文件是否存在
                    - 若存在：判断目标对象文件与依赖对象文件的时间关系，看是否需要重新生成
                  ![ce2ed243b7ac0169633d0d201af06e79.png](en-resource://database/472:1)
                  从图中可以看到main的时间戳比main.c的时间戳大，说明目标对象文件是最新的，就不用重新生成了。
                  - 若不存在：在makefile继续向下查找依赖对象的生成规则
                    - 依赖对象在下一条规则中作为目标对象被生成，进而生成第一个目标对象后退出
              - 目标对象文件不存在：直接执行命令生成
      - makefile预定义变量：$@ $< $^
        - $@: 目标对象
        - $^：所有的依赖对象
        - $<: 依赖对象的第一个  
      - 伪对象：不管对象是否最新，是否存在，每次都需要为对象执行命令 
      - 声明伪对象：.PHONY:clean
    - makefile的几种变量赋值方式
            1."= "：使用“=”赋值之后，变量的值是整个makefile中最后被指定 的值。如：
            VIR_A = A;
             VIR_B = $(VIR_A)B;
              VIR_A = AA;
             经过上面的赋值后，VIR_A = AA B,而不是A B。
           2. " :=" : 直接赋值，赋予当前位置的值。如：
            VIR_A = A;
             VIR_B = $(VIR_A)B;
              VIR_A = AA;
             经过上面的赋值后，VIR_A = A B,而不是AA B。
             3. "?=" :表示如果该变量后面没有被赋值，则赋予等号后面的值
             如： VIR_A ?= new_value；
             如果VIR_A在之前没有被赋值，那么VIR_A的值就为new_value;
             VIR_A := old_value；
             VIR_A ?= new_value；
             这种情况下，VIR_A的值就为old_value。
             4. "+=":跟代码上的+=一样。 如：
             VIR_A = file1;
             VIR_B += file2;
             VIR_B最后的值为file1，file2；
  ## Linux调试器-gdb使用
  - 程序的发布方式有两种：debug模式和release模式，而gcc默认生成的是release模式，不包含调试信息，无法实现逐步调试。所以要想去调试程序，就得在gcc后面加上-g选项：gcc-g选项生成debug可调试版本。
  - gdb的使用方法
    - 1、gdb ./main :首先加载程序。如果加载程序的时候，有程序运行参数，不能加载的时候给与，应该调试的时候给与。
    - 2、开始调试 ：start：开始逐步调试程序   run：直接运行程序
    - 3、常见操作：
        - list：查看代码,接着上次的位置往下列，每次列十行。
        list:3 
        ![00764ca1925848d994730793c51e4d3c.png](en-resource://database/478:0)
       -  s:下一步，跟踪进入函数
       -  watch：变量监控；当变量内容改变时停下来。按c往下监控
       -  n：单条执行；跟s有点区别。主要体现在主函数里如果有函数调用的时候：用s函数直接就执行结束了，而n则是进入函数内部一步一步执行。
       -  p：打印变量的值
    - 4、断点相关：
        - break 行号：在某一行设置断点
        - break 函数名：在某个函数开头设置断点
        - info：查看调试信息   info b：查看断点信息
        - continue：继续运行
        - delete breakpoints：删除所有断点
        - delete breakpoints n：删除序号为n的断点
        ![d13100358ee3a480706099e97c88086d.png](en-resource://database/480:0)
        
    - 5、查看调用栈信息
        - backtrace：查看函数调用栈信息，快速定位程序崩溃位置
        如果函数没有问题，调用栈就直接结束
        ![fda9197a505786a41c1413442b5336ce.png](en-resource://database/482:0)
       如果函数有问题，这个时候如果查看调用栈信息就能快速定位到程序的崩溃位置。
       ![f76ce6b4eebc9735f6ab4971ae5cedee.png](en-resource://database/484:0
       上面这个图上显示的是调用栈信息。从这个调用栈信息上我们能快速找到程序的崩溃位置，进而找出程序的错误原因。
       
        
        
        
                    
                  
                     
            
                        
                        
                        
                
              